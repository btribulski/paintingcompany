<?php

/**
 * Implementation of hook_init().
 */
function color_choices_init() {
  drupal_add_css(drupal_get_path('module', 'color_choices') .'/color_choices.css');
}

function color_choices_nodeapi(&$node, $op) {
  	if($node->type =='color_choices'){
		switch ($op) {
			case 'load':
				/* 
				 * Get Color Choice Job Data
				 */				
				$sql = "SELECT nid,uid,branch_manager,number_rooms,lead_source,total_price,payment_method
						FROM {color_choice_job} 
						WHERE nid = %d
						ORDER BY id ASC";
				$result = db_query ($sql, $node->nid);
				while ($row = db_fetch_object($result)) {
					$node->customer_uid = $row->uid;
					$node->branch_manager = $row->branch_manager;
					$node->number_rooms = $row->number_rooms;
					$node->lead_source = $row->lead_source;
					$node->total_price = $row->total_price;
					$node->payment_method = $row->payment_method;
				}
				
				/*
				 * Get Customer Data
				 */
				if($node->customer_uid>0){ 
					 //Pull the Data from the CiviCRM database
					$customer = user_load($node->customer_uid);
					
					$datapull = color_choices_get_civicrm_data($customer->uid);
					$crm_id = $datapull[0];
					$customer_data = $datapull[1];
					
					$node->customer_uid = $customer->name;
					$node->email = $customer->mail;
					$node->first_name = $customer_data[$crm_id]['first_name'];
					$node->last_name = $customer_data[$crm_id]['last_name'];
					$node->address = $customer_data[$crm_id]['street_address'];
					$node->city = $customer_data[$crm_id]['city'];
					$node->state = $customer_data[$crm_id]['state_province'];
					$node->zip = $customer_data[$crm_id]['postal_code'];
					$node->phone_home = $customer_data['phone_home'];
					$node->phone_mobile = $customer_data['phone_mobile'];
				}
				else {
					//PULL the data from the color_choice_job table
					$sql = "SELECT first_name,last_name,email,address,city,state,zip,phone_home,phone_mobile
						FROM {color_choice_job} 
						WHERE nid = %d
						ORDER BY id ASC";
					$result = db_query ($sql, $node->nid);
					while ($row = db_fetch_object($result)) {
						$node->email = $row->email;
						$node->first_name =$row->first_name;
						$node->last_name =$row->last_name;
						$node->address =$row->address;
						$node->city =$row->city;
						$node->state =$row->state;
						$node->zip =$row->zip;
						$node->phone_home = $row->phone_home;
						$node->phone_mobile = $row->phone_mobile;
					}
				
				} 
				
				/* 
				 * Get Color Choice Choices Data
				 */				
				$i=0;
				$sql = "SELECT nid,room_name,area,manufacturer,brand,finish,color_name,color_number
						FROM {color_choice_choices} 
						WHERE nid = %d
						ORDER BY id ASC";
				$result = db_query ($sql, $node->nid);
				while ($row = db_fetch_object($result)) {
					$node->color_choice[$i]['room_name'] = $row->room_name;
					$node->color_choice[$i]['area'] = $row->area;
					$node->color_choice[$i]['manufacturer'] = $row->manufacturer;
					$node->color_choice[$i]['brand'] = $row->brand;
					$node->color_choice[$i]['finish'] = $row->finish;
					$node->color_choice[$i]['color_name'] = $row->color_name;
					$node->color_choice[$i]['color_number'] = $row->color_number;
					$i++;	
				}
				
				break;
			case 'insert':
				_color_choice_db_insert($node);
				break;
			case 'update':
				db_query ('DELETE FROM {color_choice_choices} where nid = %d', $node->nid);
				db_query ('DELETE FROM {color_choice_job} where nid = %d', $node->nid);
				_color_choice_db_insert($node);
				break;
			case 'view':
			    //print_r($node);
				break;
			case 'delete':
				db_query ('DELETE FROM {color_choice_choices} where nid = %d', $node->nid);
				db_query ('DELETE FROM {color_choice_job} where nid = %d', $node->nid);
				break;
					
		}//end of $op switch
	}//End of check for $node->type		
}
/**
 * Implementation of hook_menu().
 */
function color_choices_menu(){
	$items['color-choices/js'] = array(
		'title' => 'Javascript Sold Jobs Form',
		'page callback' => 'color_choices_js',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
  	);
	$items['color-choices/customer-data/pull/js'] = array(
		'title' => 'Javascript Sold Jobs Form',
		'page callback' => 'color_choices_customer_data_pull_js',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
  	);
	$items['color-choices/branch-manager/autocomplete'] = array(
		'title' => 'Autocomplete for the Branch Manager Field',
		'page callback' => 'color_choices_branch_manager_autocomplete',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	return $items;
} 

/**
 * Implementation of hook_form_alter().
 */
function color_choices_form_alter (&$form, &$form_state, $form_id) {
	
	switch ($form_id) {
		case 'color_choices_node_form':
		   $node = $form['#node'];
			
			//$form['#cache']=TRUE;
			//$form['#tree']=TRUE;
  
			$form['body_field']['body']['#title'] = t('Notes');
			$form['title']['#title'] = t('Project Name');
			if ($form['title']['#default_value'] =='') $form['title']['#default_value'] = color_choices_auto_title();
		  
		  if (isset($form_state['value']['color_choice_count'])) {
			$color_choice_count = $form_state['value']['color_choice_count'];
		  }
		  else {
			$color_choice_count = max(2, empty($node->color_choice) ? 2 : count($node->color_choice));
		  }
		  
		  //Add Customer Data Fields (CCK didn't work so hot)
		  
		  $form['customer_uid'] = array(
		  	'#type' => 'textfield',
			'#title' => t('Select an Existing Account'),
			'#description' => t('Use this field to pull up an existing customer record from the database. Just leave blank to enter a new customer.'),
			'#autocomplete_path' => 'user/autocomplete',
			'#default_value' => $node->customer_uid,
			
		  
		  );
		  $form['customer_search'] = array(
		  	'#type' => 'button',
			'#default_value' => t('Retrieve Contact Info'),
			'#ahah' => array(
				  'event' => 'click', 
				  'path' => 'color-choices/customer-data/pull/js',
				  'wrapper' => 'customer-data-wrapper',
				  'method' => 'replace',
				  'effect' => 'fade',
			 ),
		  );
		  
		  $form['customer_data'] = array(
		  	'#type' => 'fieldset',
			'#title' => t('Customer Details'),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
			'#tree' => FALSE,
			'#prefix' => '<div class="clear-block" id="customer-data-wrapper">',
			'#suffix' => '</div>',
		  );
		   $form['customer_data']['first_name'] = array(
			 '#type' => 'textfield',
			 '#title' => t('First Name'),
			 '#default_value' => $node->first_name,
			 '#size' => 20,
			 '#maxlength' => 50,
			 '#weight' => 0,
		   );
		   $form['customer_data']['last_name'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Last Name'),
			 '#default_value' => $node->last_name,
			 '#size' => 30,
			 '#maxlength' => 50,
			 '#weight' => 1,
		   );
		   $form['customer_data']['email'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Email'),
			 '#default_value' => $node->email,
			 '#size' => 30,
			 '#maxlength' => 50,
			 '#weight' => 2,
		   );
		   $form['customer_data']['address'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Address'),
			 '#default_value' => $node->address,
			 '#size' => 20,
			 '#maxlength' => 50,
			 '#weight' => 3,
		   );
		   $form['customer_data']['city'] = array(
			 '#type' => 'textfield',
			 '#title' => t('City'),
			 '#default_value' => $node->city,
			 '#size' => 25,
			 '#maxlength' => 50,
			 '#weight' => 4,
		   );
		   $form['customer_data']['state'] = array(
			 '#type' => 'textfield',
			 '#title' => t('State'),
			 '#default_value' => $node->state,
			 '#size' => 10,
			 '#maxlength' => 50,
			 '#weight' => 5,
		   );
		   $form['customer_data']['zip'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Zip'),
			 '#default_value' => $node->zip,
			 '#size' => 10,
			 '#maxlength' => 50,
			 '#weight' => 6,
		   );
		   $form['customer_data']['phone_home'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Home Phone'),
			 '#default_value' => $node->phone_home,
			 '#size' => 15,
			 '#maxlength' => 50,
			 '#weight' => 7,
		   );
		   $form['customer_data']['phone_mobile'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Mobile Phone'),
			 '#default_value' => $node->phone_mobile,
			 '#size' => 20,
			 '#maxlength' => 50,
			 '#weight' => 8,
		   );
		  $form['job_data'] = array(
		  	'#type' => 'fieldset',
			'#title' => t('Job Details'),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
			'#tree' => FALSE,
			'#prefix' => '<div class="clear-block" id="job-data-wrapper">',
			'#suffix' => '</div>',
		  );
		  $form['job_data']['branch_manager'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Branch Manager'),
			 '#description' => t('Start typing the last name and the system will provide a list of Branch Managers and will automatically fill in the proper username'),
			 '#default_value' => $node->branch_manager,
			 '#autocomplete_path' => 'color-choices/branch-manager/autocomplete',
			 '#size' => 20,
			 '#maxlength' => 50,
			 '#weight' => 1,
		   );
		   $form['job_data']['number_rooms'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Number of Rooms'),
			 '#default_value' => $node->number_rooms,
			 '#size' => 2,
			 '#maxlength' => 5,
			 '#weight' => 2,
		   );
		   $form['job_data']['lead_source'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Lead Source'),
			 '#default_value' => $node->lead_source,
			 '#size' => 25,
			 '#maxlength' => 100,
			 '#weight' => 3,
		   );
		   $form['job_data']['total_price'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Total Price'),
			 '#default_value' => $node->total_price,
			 '#size' => 10,
			 '#maxlength' => 50,
			 '#weight' => 4,
		   );
		   $form['job_data']['payment_method'] = array(
			 '#type' => 'textfield',
			 '#title' => t('Payment Method'),
			 '#default_value' => $node->payment_method,
			 '#size' => 10,
			 '#maxlength' => 50,
			 '#weight' => 5,
		   );
		   
		   
		  // Add a wrapper for the color choices and more button.
		  $form['color_choice_wrapper'] = array(
		  	'#type' => 'fieldset',
			'#title' => 'Color Choices',
			'#description'=> t('Fill in the details about the colors for this job. NOTE: Just start typing the information in the fields and the site will automatically present the proper choices for you'),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
			'#tree' => FALSE,
			'#prefix' => '<div class="clear-block" id="color-choice-wrapper">',
			'#suffix' => '</div>',
		  );
		  		
		  // Container for just the Color Choice Entry Fields.
		  $form['color_choice_wrapper']['color_choice'] = array(
			'#prefix' => '<div id="color-choice">',
			'#suffix' => '</div>',
			'#theme' => 'color_choices',
		  );
		  
		 $form['color_choice_wrapper']['color_choice']['color_choice_count'] = array(
		  	'#type' => 'hidden',
			'#default_value' => $color_choice_count,
		  );
		  
		  $form['color_choice_wrapper']['color_choice_more'] = array(
			'#type' => 'button',
			'#value' => t('Add Choices'),
			'#description' => t("If the amount of choices above isn't enough, click here to add more."),
			'#weight' => 25,
			//'#submit' => array('color_choices_more_jobs_submit'), // If no javascript action.
			'#ahah' => array(
				  'event' => 'click', 
				  'path' => 'color-choices/js',
				  'wrapper' => 'color-choice',
				  'method' => 'replace',
				  'effect' => 'fade',
			 ),
		  	);
		  
		  // Add the current sold jobs to the form.
		  for ($delta = 0; $delta < $color_choice_count; $delta++) {
			
			$room_name = isset($node->color_choice[$delta]['room_name']) ? $node->color_choice[$delta]['room_name'] : '';
			$area = isset($node->color_choice[$delta]['area']) ? $node->color_choice[$delta]['area'] : '';
			$manufacturer = isset($node->color_choice[$delta]['manufacturer']) ? $node->color_choice[$delta]['manufacturer'] : '';
			$brand = isset($node->color_choice[$delta]['brand']) ? $node->color_choice[$delta]['brand'] : '';
			$finish = isset($node->color_choice[$delta]['finish']) ? $node->color_choice[$delta]['finish'] : '';
			$color_name = isset($node->color_choice[$delta]['color_name']) ? $node->color_choice[$delta]['color_name'] : '';
			$color_number = isset($node->color_choice[$delta]['color_number']) ? $node->color_choice[$delta]['color_number'] : '';
			
			
			$form['color_choice_wrapper']['color_choice'][$delta] = _color_choice_form($delta, $room_name,$area,$manufacturer,$brand,$finish,$color_name,$color_number);
		  }
		  
		  break; // end of color_choices_node_form
		  
		  case 'views_exposed_form':
		  	$form['branch_manager']['#autocomplete_path']='color-choices/branch-manager/autocomplete';
		  break;
		  
	}		
}

/**
 * Sub Form for a Sold Job.
 */
function _color_choice_form($delta, $room_name = '', $area = '', $manufacturer = '', $brand = '', $finish = '', $color_name = '', $color_number = '') {
  $choice_number = $delta+1;
  $form['#tree']=TRUE;
  
  // We'll manually set the #parents property of these fields so that
  // their values appear in the $form_state['values']['color-choice'] array.
   
   $vid = 6;         /* <---- put correct vocabulary ID here */
   $form['room_name'] = array(
     '#type' => 'textfield',
     '#title' => t('Room Name'),
     '#default_value' => $room_name,
     '#autocomplete_path' => 'taxonomy/autocomplete/'. $vid,
     '#size' => 20,
	 '#maxlength' => 255,
     '#weight' => 1,
	 '#parents' => array('color_choice', $delta, 'room_name'),
     '#prefix' => t('<div class="color-choice-line"><div class="title">Color Choice # ' . $choice_number . '</div><div class="color-choice-top">'),
  );
  
  $vid = 7; /* <---- put correct vocabulary ID here */
  $form['area'] = array(
     '#type' => 'textfield',
     '#title' => t('Area'),
     '#default_value' => $area,
     '#size' => 20,
     '#autocomplete_path' => 'taxonomy/autocomplete/'. $vid,
	 '#maxlength' => 255,
	 '#weight' => 2,
     '#parents' => array('color_choice', $delta, 'area'),
	 '#suffix' => '</div>',
   );
  
  $vid = 8; /* <---- put correct vocabulary ID here */
  $form['manufacturer'] = array(
     '#type' => 'textfield',
     '#title' => t('Manufacturer'),
     '#default_value' => $manufacturer,
     '#size' => 20,
     '#autocomplete_path' => 'taxonomy/autocomplete/'. $vid,
	 '#maxlength' => 255,
	 '#weight' => 3,
     '#parents' => array('color_choice', $delta, 'manufacturer'),
	 '#prefix' =>'<div class="color-choice-bottom">',
   );
   $vid = 9; /* <---- put correct vocabulary ID here */
  $form['brand'] = array(
     '#type' => 'textfield',
     '#title' => t('Brand'),
     '#default_value' => $brand,
     '#size' => 20,
     '#autocomplete_path' => 'taxonomy/autocomplete/'. $vid,
	 '#maxlength' => 255,
	 '#weight' => 4,
     '#parents' => array('color_choice', $delta, 'brand'),
   );  
  
  $vid = 10; /* <---- put correct vocabulary ID here */
  $form['finish'] = array(
     '#type' => 'textfield',
     '#title' => t('Finish'),
     '#default_value' => $finish,
     '#size' => 20,
     '#autocomplete_path' => 'taxonomy/autocomplete/'. $vid,
	 '#maxlength' => 255,
	 '#weight' => 5,
     '#parents' => array('color_choice', $delta, 'finish'),
   ); 
  $form['color_name'] = array(
     '#type' => 'textfield',
     '#title' => t('Color Name'),
     '#default_value' => $color_name,
     '#size' => 20,
     '#maxlength' => 255,
	 '#weight' => 6,
     '#parents' => array('color_choice', $delta, 'color_name'),
   );
  
  $form['color_number'] = array(
     '#type' => 'textfield',
     '#title' => t('Color Number'),
     '#default_value' => $color_number,
     '#size' => 20,
     '#maxlength' => 50,
	 '#weight' => 7,
     '#parents' => array('color_choice', $delta, 'color_number'),
    '#suffix' => '</div></div>',
   );
  
  return $form;
}
/*
 * Expose the added fields from hook_form_alter to CCK for proper weighting
 */
 
function color_choices_content_extra_fields($type_name) {
  if ($type_name =='color_choices') {	
		$extras['color_choice_wrapper'] = array(
			'label' => t('Color Choice Grouping'),
			'description' => t('Area for the Color Choices'),
			'weight' => 15,
		);
	
		return $extras;
   }	
}
/* 
 * Ahah function to create extra color choices and place in form
 */
function color_choices_js(){
  
	$form_state = array('storage' => NULL, 'submitted' => FALSE);
	$form_build_id = $_POST['form_build_id'];
		  
	// Add the new element to the stored form. Without adding the element
	// to the form, Drupal is not aware of this new elements existence and
	// will not process it. We retreive the cached form, add the element,
	// and resave.
	$form = form_get_cache($form_build_id, $form_state);
	
	$choice_count= $form['color_choice_wrapper']['color_choice']['color_choice_count']['#default_value'];
	$next_choice=$choice_count+1;
	
	//Just Some Debug stuff
	//drupal_set_message('Previous Job count: '. $choice_count);
	//drupal_set_message('Next Job count: '. $next_choice);
	
	//Add the new form
	$form_element = _color_choice_form($choice_count);
		
	$form['color_choice_wrapper']['color_choice'][$choice_count] = $form_element;
	$form['color_choice_wrapper']['color_choice']['color_choice_count']['#default_value']= $next_choice;
	
	form_set_cache($form_build_id, $form, $form_state);
	$form += array(
		'#post' => $_POST,
		'#programmed' => FALSE,
	);
	// Rebuild the form.
	$form = form_builder('color_choices_node_form', $form, $form_state);
	
	// Render the new output.
	$subform = $form['color_choice_wrapper']['color_choice'];
	$output = theme('status_messages') . drupal_get_js(). drupal_render($subform);
	
	drupal_json(array('status' => TRUE, 'data' => $output));
	
}
/* 
 * Ahah function to pull customer data and place in form
 */
function color_choices_customer_data_pull_js() {
	$form_state = array('storage' => NULL, 'submitted' => FALSE);
	$form_build_id = $_POST['form_build_id'];
		  
	// Add the new element to the stored form. Without adding the element
	// to the form, Drupal is not aware of this new elements existence and
	// will not process it. We retreive the cached form, add the element,
	// and resave.
	$form = form_get_cache($form_build_id, $form_state);
	
	
	
	//Add the new form
	  //$form_element = _color_choice_form($choice_count);
	  //$form['color_choice_wrapper']['color_choice'][$choice_count] = $form_element;
	
	//Pull the Data from the CiviCRM database
	$customer = user_load(array('name'=>$_POST['customer_uid']));
	
	$datapull = color_choices_get_civicrm_data($customer->uid);
	$crm_id = $datapull[0];
	$customer_data = $datapull[1];
	//drupal_set_message('Customer UID: ' .$customer->uid);
	
	$form['customer_data']['first_name']['#value'] = $customer_data[$crm_id]['first_name'];
	$form['customer_data']['last_name']['#value'] = $customer_data[$crm_id]['last_name'];
	$form['customer_data']['address']['#value'] = $customer_data[$crm_id]['street_address'];
	$form['customer_data']['city']['#value'] = $customer_data[$crm_id]['city'];
	$form['customer_data']['state']['#value'] = $customer_data[$crm_id]['state_province'];
	$form['customer_data']['zip']['#value'] = $customer_data[$crm_id]['postal_code'];
	$form['customer_data']['email']['#value'] = $customer->mail;
	$form['customer_data']['phone_home']['#value'] = $customer_data['phone'];
	$form['customer_data']['phone_mobile']['#value'] = $customer_data['phone_mobile'];
	
	
	form_set_cache($form_build_id, $form, $form_state);
	$form += array(
		'#post' => $_POST,
		'#programmed' => FALSE,
	);
	// Rebuild the form.
	$form = form_builder('color_choices_node_form', $form, $form_state);
	
	// Render the new output.
	$subform = $form['customer_data'];
	$output = theme('status_messages') . drupal_get_js(). drupal_render($subform);
	
	drupal_json(array('status' => TRUE, 'data' => $output));

}

/**
 * Submit handler to add more jobs to the sold job form. This handler is used when
 * javascript is not available. It makes changes to the form state and the
 * entire form is rebuilt during the page reload.
 */
function color_choices_more_jobs_submit($form, &$form_state) {
  // Set the form to rebuild and run submit handlers.
  /*
  node_form_submit_build_node($form, $form_state);

  // Make the changes we want to the form state.
  if ($form_state['values']['color_choice_more']) {
    $n = $_GET['q'] == 'color-choices/js' ? 1 : 5;
    $form_state['color_choice_count'] = count($form_state['values']['color_choice']) + $n;
  }
  */
}

/*
 * Autocomplete function for selecting a Branch Manager
 */
function color_choices_branch_manager_autocomplete($string= ''){
  $items = array();  
  $sql ="SELECT a.uid as drupal_id, a.name as drupal_username,a.mail as email, 
			c.first_name, 
			c.last_name
			FROM paintco_drupal6.users a 
			INNER JOIN paintco_drupal6.users_roles r on a.uid = r.uid
			LEFT OUTER JOIN paintco_civicrm.civicrm_uf_match m on a.uid=m.uf_id
			LEFT OUTER JOIN paintco_civicrm.civicrm_contact c on m.contact_id = c.id
			WHERE a.status =1 AND (r.rid = 10) AND c.last_name LIKE '%s%%'
			GROUP by a.uid
			ORDER BY c.last_name ASC";
  $result = db_query_range($sql, $string, 0, 10);
  
  while($obj = db_fetch_object($result)) {
    $items[$obj->drupal_username] = $obj->last_name .", ". $obj->first_name;
  }
  drupal_json($items); 
} 

/*
 *Inserts Color Choice Data into the database
 */
function _color_choice_db_insert($node) {
	
	
	/****************************
	 // Insert/Update the Customer Data
	 ****************************/ 
	 $customer_data = color_choices_save_customer_data($node);
	 
	
	/****************************
	 // Insert the Job Data
	 ****************************/
	 //yeah I know the address info is redundant but it is necessary
	 //If an email address is not supplied the information can not be stored in the user account and CRM database.
	 
	$sql = "INSERT INTO {color_choice_job} (nid,
											uid,
											first_name,
											last_name,
											email,
											address,
											city,
											state,
											zip,
											phone_home,
											phone_mobile,
											branch_manager,
											number_rooms,
											lead_source,
											total_price,
											payment_method) 
				VALUES (%d, %d, '%s', '%s','%s','%s','%s','%s','%s','%s','%s', '%s', %d, '%s', '%s', '%s')";
	db_query($sql, $node->nid, 
		 $customer_data['uid'],
		 $node->first_name,
		 $node->last_name,
		 $node->email,
		 $node->address,
		 $node->city,
		 $node->state,
		 $node->zip,
		 $node->phone_home,
		 $node->phone_mobile,
		 $node->branch_manager,
		 $node->number_rooms,
		 $node->lead_source,
		 $node->total_price,
		 $node->payment_method
	 );
	 
	
	 
	
	/****************************
	 // Insert the Color Choices
	 ****************************/
	foreach ($node->color_choice as $color_choice) {
		if(strlen($color_choice['room_name']) && strlen($color_choice['area'])){ //check to see if job was entered
			//drupal_set_message('Inserted Color Choice');
			$sql = "INSERT INTO {color_choice_choices} (nid,room_name,area,manufacturer,brand,finish,color_name,color_number) 
				VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s','%s')";
				db_query($sql, $node->nid, 
					 $color_choice['room_name'],
					 $color_choice['area'],
					 $color_choice['manufacturer'],
					 $color_choice['brand'],
					 $color_choice['finish'],
					 $color_choice['color_name'],
					 $color_choice['color_number']
				 );
				 
		} //end if values entered 
	} //end foreach loop
}

/*
 *Creates options for select box form item in Sold Job Subform
 */
function _color_choice_taxonomy_select_options($vid) {
	$terms = taxonomy_get_tree($vid);
	$select_option_values = array();
	foreach ($terms as $term) {	
	$select_option_values[$term->tid] = $term->name;	}
	
	return $select_option_values;
}

/*
 * Enters a default page title on Nightly Report creation
 */
function color_choices_auto_title() {
	global $user;
	$auto_title = date("Y-m-d"). ' Color Choices for '. $user->name ;
	return $auto_title;
}

/*
 **********************************************
 * Display functions here
 **********************************************
 */
 
/*
 * Implement hook_theme to register the theme functions
 */ 
function color_choices_theme () {
  return array(
    'color_choices_color_choices' => array(
      'arguments' => array('color_choices' => NULL)
    ),
	'color_choices_job_info' => array(
      'arguments' => array('node' => NULL)
    ),
  );
}

 /*
 * Theme the Job Info
 */
 function theme_color_choices_job_info($node) {
 	$output  = '<div class="color-choice-customer-info">';
	$output .= '<h2>Customer Info</h2>';
	$output .= $node->first_name . ' ' .$node->last_name .'<br>';
	$output .= $node->address .'<br>';
	$output .= $node->city .', '. $node->state .' '. $node->zip .'<br>';
	$output .= 'Home Phone: ' .$node->phone_home .'<br>';
	$output .= 'Mobile Phone: '. $node->phone_mobile .'<br>';
	$output .= '</div>';
	
	$output .= '<div class="color-choice-job-info">';
	$output .= '<h2>Job Details</h2>';
	$output .= 'Branch Manager: '. $node->branch_manager .'<br>';
	$output .= 'Number of Rooms: '. $node->number_rooms .'<br>';
	$output .= 'Lead Source: '. $node->lead_source .'<br>';
	$output .= 'Total Price: '. $node->total_price .'<br>';
	$output .= 'Payment Method: '. $node->payment_method .'<br>';
	$output .= '</div>';
	
	return $output;
 }


 
 /*
 * Theme the Color Choices
 */
 function theme_color_choices_color_choices($color_choices) {
 	    $output = '<h2>Color Choices</h2>';
		$output .= '<table class="color-choice-table">';
	 	$output.= '<tr class="header-row">';
		$output.= '<td>Room</td>';
		$output.= '<td>Area</td>';
		$output.= '<td>Manufacturer</td>';
		$output.= '<td>Brand</td>';
		$output.= '<td>Finish</td>';
		$output.= '<td>Color Name</td>';
		$output.= '<td>Color Number</td>';
		$output.= '</tr>';
	 
	 foreach ($color_choices as $color_choice){
	 	$county = taxonomy_get_term($color_choice['county']);
		$crew   = taxonomy_get_term($color_choice['crew']);
		$row_class = ($row_class =='even')?'odd':'even';
		
		$output.= '<tr class="'.$row_class.'">';
		$output.= '<td>'.$color_choice['room_name'].'</td>';
		$output.= '<td>'.$color_choice['area'].'</td>';
		$output.= '<td>'.$color_choice['manufacturer'].'</td>';
		$output.= '<td>'.$color_choice['brand'].'</td>';
		$output.= '<td>'.$color_choice['finish'].'</td>';
		$output.= '<td>'.$color_choice['color_name'].'</td>';
		$output.= '<td>'.$color_choice['color_number'].'</td>';
		
		//$output.= '<td>'.$county->name.'</td>';
		
		$output.= '</tr>';
		
	 }		
	 $output.='</table>';
	
	return $output;
 }
function color_choices_convert_date($date) {
 //dates are passed as Y-m-d h:m:s
 // 2010-05-14 00:00:00
 //we want that converted to  
 $Y = substr($date,0,4);
 $m = substr($date,5,2);
 $d = substr($date,8,2);
 
 $convert = $m .'/'.$d.'/'.$Y; 
 return $convert;

} 

/*
 * Register Views API functions
 */
 
function color_choices_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'color_choices') . '/views',
  );

}

/****************************************************
 *CUSTOMER USER ACCOUNT AND DATA FUNCTIONS 
 *****************************************************/

/*
 * This function work as the engine for storing customer data
 */
function color_choices_save_customer_data($node) {
	$customer_data=array();
	$drupal_user = color_choices_account_check_user($node);
	if ( (!$drupal_user['new_account']) && ($drupal_user['uid']===0) ) { //no email passed so no account was created
		$customer_data['uid'] = null;
		$customer_data['new_account'] = $drupal_user['new_account'];
	}
	else{
		$crm_id = color_choices_save_civicrm_data($drupal_user,$node);
		$customer_data['uid']=$drupal_user['uid'];
		$customer_data['crm_id']=$crm_id;
	}
	return $customer_data;

}	

function color_choices_get_civicrm_data($customer_uid) {
	
	if (module_exists('civicrm') && ($customer_uid>0)) {
		
		civicrm_initialize(TRUE);
		include_once 'api/api.php';
		//Get Civicrm Contact ID of person entering the information
		$params =array(
			'version' => 3,
			'uf_id' => $customer_uid,
		);
		$results=civicrm_api("UFMatch","get", $params);
		$crm_id = $results['values'][$results['id']]['contact_id'];
		
		$params = array(
				'id' => $crm_id,
				'version' => 3,
				'return.first_name' => 1,
				'return.last_name' => 1,
				'return.current_employer' => 1,
				'return.street_address' => 1,
				'return.city' => 1,
				'return.state_province' => 1,
				'return.postal_code' => 1,
				'return.email' => 1,
				'return.phone' =>1, 
				'return.job_title'=>1,
				'return.custom_6' => 1,   //How You heard about us 
		);		
		$result = civicrm_api( 'contact','get',$params );
		drupal_set_message('color_choices.module line 891: inside the customer data pull');
		$customer_data = $result['values'];
		return array($crm_id,$customer_data);
	}	
	
}
/*
 * Updates the Information in the CiviCRM database
 */
function color_choices_save_civicrm_data($user_id,$node){
	global $civicrm_root; 
	 
	if (module_exists('civicrm') && ($user_id['uid']>0)) {
		civicrm_initialize(TRUE);
		
		/* Load the required CiviCRM API's */
		require_once($civicrm_root.'/api/v2/Contact.php');
		require_once($civicrm_root.'/api/v2/UFGroup.php');
		require_once($civicrm_root.'/api/v2/Location.php');
		
		
		
		$crm_id = crm_uf_get_match_id($user_id['uid']);
		
		//drupal_set_message('Found a CiviCRM match:'. $crm_id);	
		
		$params = array(
			'contact_id'    => $crm_id,
			'contact_type'  => 'Individual',
			'first_name'    => $node->first_name,
			'last_name'     => $node->last_name,
			'display_name'  => $node->first_name .' ' .$node->last_name,
			'sort_name'     => $node->last_name .', '.$node->first_name, 
			'email'         => $node->email
		);
		
		$contact = ($user_id['new_account'])? civicrm_contact_add( $params ): civicrm_contact_update( $params );
		$update_type = ($user_id['new_account'])? "Add" : "Update";
		
		//drupal_set_message('Heres what contact add gave :'. $contact['contact_id']);	
		
		
		/*
		drupal_set_message('Saving Address: '. $node->address);
		drupal_set_message('Saving Address: '. $node->city);
		drupal_set_message('Saving Address: '. $node->state);
		drupal_set_message('Saving Address: '. $node->zip);
		*/
		if (!$user_id['new_account']){
			$existing_locations = civicrm_location_get( array(
								'contact_id' => $contact['contact_id'],
								'version' => '3.0' 
								) 
							);
			$phones_existing = $existing_locations['phone'];
		}	
		
		$address = array( 1 => array( 'location_type_id'       => 1,
									  'location_type'          => 'Home',
                                      'street_address'         => $node->address,
									  'city'                   => $node->city,
                                      'state_province'         => $node->state,
                                      'postal_code'            => $node->zip,
									  'is_primary' 			   => TRUE,
                                     )
        );
		
		/*
		drupal_set_message('Saving Home Phone: '. $node->phone_home);
		drupal_set_message('Saving Mobile Phone: '. $node->phone_mobile);	
		*/
		
		$phone_home = array(
			'phone'         => $node->phone_home,
            'phone_type_id' => 1,
            'is_primary' => TRUE,
			'location_type' => 'Home',
			'location_type_id' => 1,
		);
        $phone_mobile = array(
			'phone'            => $node->phone_mobile,
            'phone_type_id'    =>  2,
            'location_type'    =>'Home',
			'location_type_id' => 1
         );
		 // Put them in an array and then add to $params array
    	
		$phones = array( $phone_home, $phone_mobile);
		
		
        $params = array(
			'version'    => '3.0',
            'contact_id' => $contact['contact_id'],
            'address'    => $address,
			'phone'      => $phones,
            
        );
        $newLocation = ($user_id['new_account'])? civicrm_location_add($params): civicrm_location_update($params);
		//$newLocation =  civicrm_location_add($params);
		//drupal_set_message('After user record '. $update_type. ' with CRM id: '. $contact['contact_id']);
		
		return $contact['contact_id'];
	}
}
/*
 * Handle User Account Creation
 */
function color_choices_account_check_user($node) {
	$user_id=array(); 
	if(strlen(trim($node->email))){
		
		
		$sql = "SELECT uid,name,mail from {users} where mail ='%s'";
		$result = db_query($sql, $node->email);
		while ($row = db_fetch_object($result)) {
				$user_id['uid'] =  $row->uid;
				$user_id['new_account']=false;
				$account = user_load($row->uid);
		}
		
		if(!$user_id) {
			//create user account - 9 in 'roles' is the current number for the customer account
			$create_account = array(
				'name' => color_choices_account_username_creator($node),
				'mail' => $node->email,
				'pass' => 'temp!pass',
				'status' => 1,
				'created' => time() - (15),
				'access' => 0,
				'roles' => array('9'=>'customer'),
				
			);
			$account = user_save(null,$create_account);
			$user_id['uid'] = 	$account->uid;
			$user_id['new_account']=true;
		}//end if check if no user exists
	}
	else { //no email passed so no user creation
		$user_id['uid']=0;
		$user_id['new_account']=false;
	}
	return $user_id;
}
/*
 * Creates a username using the first and lastname of the person entered on the Sold Job
 * Increments the username if it already exists i.e. John Smith 1, John Smith 2, etc 
 */
function color_choices_account_username_creator($node) {
	$i =1;
	$username_base = $node->first_name.' '.$node->last_name;
	$username = $username_base;
	while ( color_choices_account_username_exists($username) ){
		$username = $username_base .' '. $i; 
		$i++;
	}
	return $username;	

}
/*
 * Checks the database to see if the username already exists
 */
function color_choices_account_username_exists($username) {
	$sql = "SELECT name from {users} where name ='%s'";
	$result = db_query($sql, $username);
	if (db_result($result)){
		return true;
	}
	else {
		return false;
	}
}
